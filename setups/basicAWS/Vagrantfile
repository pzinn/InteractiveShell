# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
#
# Install the vagrant-aws plugin before using this file, to be found on
#
# https://github.com/mitchellh/vagrant-aws
#

ACCESS_KEY_ID = "ACCESS_KEY_ID" # taken from ...
SECRET_ACCESS_KEY = "SECRET_ACCESS_KEY"
KEYPAIR_NAME = "KEYPAIR_NAME"
PRIVATE_KEY_PATH = "PRIVATE_KEY_PATH.pem"
AMI = "ami-d05e75b8"
INSTANCE_TYPE = "t2.micro"
AWS_REGION = "us-east-1" # not e.g. "us-east-1d" (i.e. leave out 'd')

# Settings:
mathProgram = "M2"
npmCmd = "npm start"
logfilePath = "/home/vagrant/web" + mathProgram + ".log"

Vagrant.configure(2) do |config|
  
  # Use a dummy box, since aws-provider will just copy an already existing AMI.
  # Do
  #
  # vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box
  #
  # to install the dummy box, then:
  config.vm.box = "dummy"


  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network "forwarded_port", guest: 8002, host: 3691
  #
  # WARNING: vagrant cannot do AWS networking for you. Enable portforwarding on
  # AWS page.
  
  config.vm.provider :aws do |aws, override|
    # This are your AWS credentials from the page:
    aws.access_key_id = ACCESS_KEY_ID
    aws.secret_access_key = SECRET_ACCESS_KEY
    
    # Create this on the aws page. The file you download goes into the second
    # entry. The keypair name is the name you enter when generating the key,
    # the path is the location of the file you download when generating the
    # key.
    aws.keypair_name = KEYPAIR_NAME
    override.ssh.private_key_path = PRIVATE_KEY_PATH

    # Find these on the AWS page, using the 'launch instance' dialogue.
    aws.ami = AMI
    aws.instance_type = INSTANCE_TYPE

    # Region on the AWS page at upper right.
    aws.region = AWS_REGION

    # Default username for ubuntu machine.
    override.ssh.username = "ubuntu"
  end

  config.vm.provision "sudo", type:"shell", privileged:true, inline: <<-SHELL
    apt-get update && apt-get upgrade -y
    apt-get install -y nodejs npm wget
    wget -qO- https://get.docker.com/ | sh
    ln -s /usr/bin/nodejs /usr/bin/node
    ln -s /home/ubuntu /home/vagrant
  SHELL

  config.vm.provision "gitclone", type:"shell", privileged:false, inline: <<-SHELL
    git clone https://github.com/fhinkel/Macaulay2Web.git
  SHELL

  config.vm.provision "nvm", type:"shell", privileged:false, inline: <<-SHELL
    curl https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash
    source ~/.nvm/nvm.sh;
    nvm install stable
    nvm use stable
   SHELL

  config.vm.provision "node-modules", type:"shell", privileged:false, inline: <<-SHELL
    cd Macaulay2Web
    npm install
   SHELL

  config.vm.provision "docker", type:"shell", privileged:false, inline: <<-SHELL
    cd Macaulay2Web
    git pull
    rm id_rsa*
    ssh-keygen -b 1024 -f id_rsa -P ''
    sudo docker build -t m2container .
  SHELL

  config.vm.provision "remove", type:"shell", privileged:false, run: "always", inline: <<-SHELL
       rm -f /home/vagrant/Macaulay2Web/public/users.htpasswd
     SHELL
    
      if File.exists?('users.htpasswd') then 
        config.vm.provision "file", source: "./users.htpasswd", run: "always", destination: "/home/vagrant/Macaulay2Web/public/users.htpasswd"
      end
  
  # config.vm.provision "cron", type:"shell", privileged:false do |cron|
  #     cron.inline = "echo \"" + cronString + "\" > tmpcron; crontab tmpcron; rm tmpcron"
  # end

  config.vm.provision "startup_server", type:"shell", privileged:false, run: "always", inline: <<-SHELL
       source ~/.nvm/nvm.sh
      cd Macaulay2Web
      git pull --no-verify

      npm start 2>&1 > ../webm2.log &
  SHELL

end
