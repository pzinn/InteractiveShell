-- Welcome to Macaulay2 !
-- In this window you may type in Macaulay2 commands 
-- and have them evaluated by the server.

-- Evaluate a line or selection by typing Shift+Enter 
-- or by clicking on Evaluate.

-- To open the Macaulay2 documentation for a 
-- topic in another browser tab or window do e.g.:

viewHelp "determinant"

-- If nothing shows up, you may need to set your browser 
-- to allow pop up windows.

-- Here are some sample commands:
  R = ZZ/101[a,b,c,d]
  I = ideal(a^2-b*c, a^3-b^3, a^4-b*d^3, a^5-c^2*d^3)
  J = ideal groebnerBasis I;
  netList J_*

  -- Some examples of rings
  A = ZZ/32003[a..g]
  B = QQ[x_1..x_6]
  C = ZZ/101[vars(0..12)]
---------------

-- something fun #1
restart
loadPackage "Gfx"
gfx(GfxEllipse{[0,0],90,30,"stroke"=>"none","fill"=>gfxLinearGradient{("0%","stop-color:red"),("100%","stop-color:yellow")},GfxBlur=>0.3},GfxText{[-65,-7],"Macaulay2",GfxFontSize=>25,"stroke"=>"black","fill"=>"white"},GfxHeight=>12)

-- dodecahedron
vertices={vector{-137.638,0.,26.2866},vector{137.638,0.,-26.2866},vector{-42.5325,-130.902,26.2866},vector{-42.5325,130.902,26.2866},vector{111.352,-80.9017,26.2866},vector{111.352,80.9017,26.2866},vector{-26.2866,-80.9017,111.352},vector{-26.2866,80.9017,111.352},vector{-68.8191,-50.,-111.352},vector{-68.8191,50.,-111.352},vector{68.8191,-50.,111.352},vector{68.8191,50.,111.352},vector{85.0651,0.,-111.352},vector{-111.352,-80.9017,-26.2866},vector{-111.352,80.9017,-26.2866},vector{-85.0651,0.,111.352},vector{26.2866,-80.9017,-111.352},vector{26.2866,80.9017,-111.352},vector{42.5325,-130.902,-26.2866},vector{42.5325,130.902,-26.2866}};
faces={{14,9,8,13,0},{1,5,11,10,4},{4,10,6,2,18},{10,11,7,15,6},{11,5,19,3,7},{5,1,12,17,19},{1,4,18,16,12},{3,19,17,9,14},{17,12,16,8,9},{16,18,2,13,8},{2,6,15,0,13},{15,7,3,14,0}};
centers=apply(faces,f->1/5*sum(f,i->vertices#i));
steps=30;
dodecasplit=apply(faces,centers,(f,c)->GfxPolygon{apply(f,j->vertices#j),
	GfxAutoMatrix=>apply(steps,j->gfxRotation(2*pi/5/steps*4*min(j/steps,1-j/steps),c,c)*gfxTranslation(0.075*sin(2*pi*j/steps)*c)),
	"fill"=>concatenate("rgb(",toString(134+round(1.2*c_0)),",",toString(134+round(1.2*c_1)),",",toString(134+round(1.2*c_2)),")")});
d=gfx(dodecasplit,"fill-opacity"=>0.65,GfxAutoMatrix=>gfxRotation(0.02,[1,2,3]));
d1=gfx(d,GfxMatrix=>gfxTranslation[200,0,0]); -- using alternate syntax of Array instead of Vector
d2=gfx(d,GfxMatrix=>gfxTranslation[-200,0,0]);
gfx(d1,d2,GfxRange=>{vector{-400,-400},vector{400,400}},GfxHeight=>25,"stroke-width"=>2) -- press the 3D button!

-- or
rgb={"red","green","blue"};
scan(rgb, x -> globalAssign(value x, GfxCircle{"fill"=>x,"stroke"=>"black",GfxWidth=>0.8,GfxHeight=>0.8,GfxMargin=>0}))
value\rgb
R=QQ[x_red,x_green,x_blue]
describe R
x_red^2-x_green^2
factor oo

-- or (more serious)
R=RR[x,y]; P=y^2-(x+1)*(x-1)*(x-2);
gfxPlot(P,{-2,3},"stroke-width"=>0.05,GfxHeight=>25,"stroke"=>"red")


-- something fun #2
R=ZZ[x]; expression x
x/(1+oo) -- repeat at will

-- something fun #3
restart
R=QQ[x_1..x_5,y_1..y_5]
setColor(x,red)
setColor(y_3,blue)
setColor(R,"#8866CC")
vars R
